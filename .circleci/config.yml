version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "rah-back-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "rah-front-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 3e1a016f-f871-435e-9474-bb8f41d3d152}" \
            --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
           
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: /Scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=rh-project-3 \
              --stack-name "rah-back-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            IPS=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
            curl -H "Content-Type: text/plain" -H "token: 3e1a016f-f871-435e-9474-bb8f41d3d152" --request PUT --data "$IPS" https://api.memstash.io/values/rah_ips_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=rh-project-3 \
              --stack-name "rah-front-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            IPS=$(curl -H "token: 3e1a016f-f871-435e-9474-bb8f41d3d152" --request GET https://api.memstash.io/values/rah_ips_${CIRCLE_WORKFLOW_ID:0:7})
            echo "$IPS" >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["c2:12:cf:eb:4a:50:90:20:d0:92:ae:69:bd:75:63:88"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Make .env file in backend.
          command: |
            echo "NODE_ENV=production" > backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
      - persist_to_workspace:
          root: .
          paths:
            - "backend/.env"
      - run:
          name: Configure server
          command: |
            ansible-playbook -vvv -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml 
      # Here's where you will add some code to rollback on failure      
      - destroy-environment 

  run-migrations:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i typescript ts-node
            npm --update install python3 npm
            npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if egrep "has been executed successfully|No migrations are pending" output.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 3e1a016f-f871-435e-9474-bb8f41d3d152" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      # Here's where you will add some code to rollback on failure     
      - destroy-environment  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 3e1a016f-f871-435e-9474-bb8f41d3d152" --request GET https://api.memstash.io/values/rah_ips_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" > frontend/.env
            echo NODE_ENV=production >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 sync "./dist" s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      # Here's where you will add some code to rollback on failure     
      - destroy-environment  
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 #download ansible via pip?
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["c2:12:cf:eb:4a:50:90:20:d0:92:ae:69:bd:75:63:88"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            echo "ENVIRONMENT=production" > ./backend/.env
            echo "NODE_ENV=production" >> ./backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> ./backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> ./backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> ./backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> ./backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> ./backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> ./backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> ./backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> ./backend/.env
            tar -C backend -czvf backend.tar.gz .
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml -vvv
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - revert-migrations

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl python3 py3-pip
            pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 3e1a016f-f871-435e-9474-bb8f41d3d152" --request GET https://api.memstash.io/values/rah_ips_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            if curl -s ${API_URL}; then exit 0; else exit 1; fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.website.us-east-1.amazonaws.com/#/employees"      
            echo $URL     
            if curl -s ${URL} | grep "Welcome"
              then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum update
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID > OldWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=rh-project-3
      - persist_to_workspace:
          root: .
          paths:
            - "OldWorkflowID.txt"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum update
            yum install -y tar gzip
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "rah-front-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "rah-back-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]